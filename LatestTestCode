import os
import sys
import time

sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '../../../')))

from sphero_sdk import SpheroRvrObserver
from sphero_sdk import Colors
from sphero_sdk import RvrLedGroups
from sphero_sdk import RvrStreamingServices

rvr = SpheroRvrObserver()


def ambient_light_handler(ambient_light_data):
    print('Ambient light data response: ', ambient_light_data)
    x = (ambient_light_data[AmbientLight]['Light'])
# do we need to set them here?
    rvr.set_all_leds(
        led_group=RvrLedGroups.all_lights.value,
        led_brightness_values=[color for _ in range(10) for color in Colors.off.value]
    )

    # Delay to show LEDs change
    time.sleep(1)

    rvr.set_all_leds(
        led_group=RvrLedGroups.headlight_right.value,  # 0xe00
        led_brightness_values=[1 / x, 1 / x, 1 / x]
    )

    time.sleep(1)

    rvr.set_all_leds(
        led_group=RvrLedGroups.headlight_left.value,  # 0x1c0
        led_brightness_values=[1 / x, 1 / x, 1 / x]
    )

    # Delay to show LEDs change
    time.sleep(1)


def main():
    try:
        rvr.wake()

        # Give RVR time to wake up
        time.sleep(2)

        rvr.sensor_control.add_sensor_data_handler(
            service=RvrStreamingServices.ambient_light,
            handler=ambient_light_handler
        )

        rvr.sensor_control.start(interval=250)

        while True:
            # Delay to allow RVR to stream sensor data
            time.sleep(1)

    except KeyboardInterrupt:
        print('\nProgram terminated with keyboard interrupt.')

    finally:
        rvr.sensor_control.clear()

        # Delay to allow RVR issue command before closing
        time.sleep(.5)

        rvr.close()


if __name__ == '__main__':
    main()
